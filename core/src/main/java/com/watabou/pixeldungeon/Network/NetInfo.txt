version 3  //increment when modify
1. Передача основывается на собственных правилах. //Json слишком тяжел для этой задачи
    1.1 Механизм основан на передаче запросов блоками в форматие "id, параметры"
        1.1.1 Запрос состоит из кода операции и параметров
    1.2 Передача осуществляется методами (де)серриализации объектов
    1.3 Запросы ничем не разделяются //В этом нет нужды. Ты просто передаешь данные и все. Порядок всегда один. Смысла разделять нет.
    1.4 При ошибке обработки входящего запроса принимающая сторона посылает запрос на отправку синхронизационного пакета
        1.4.1 Синхронизационныфй пакет - пакет фиксированной длины, содержащий определенную последовательность байт
        1.4.2 Синхронизациооный пакет используется для указания на свежие данные
        1.4.3 Если принимающая сторона имеет проблемы с обработкой запросов, она запрашивает этот пакет и отбрасывает все необработанные запросы до этого пакета.
            1.4.3.1: возможные причины:
                A) ошибка транспортного уровня
                Б) ошибка при формировании запроса на отправляющей стороне и/или ошибка в реаализации отправляющей стороны
                В) ошибка в работеобработчика запроса и/или ошибка в его реаллизации
                Г) иная причина

2. Единый сервер, множество клиентов.
3. Функция info для предметов и окружения работает на стороне клиента (если сервер не требует иного, тогда это явно передается).
    3.1 сервер отправит специальный пакет клиенту, сообщающий, что для функции Info последний ОБЯЗАН обратиться к серверу за получением конечной строки.

4. Сервер передает клиенту мир так, как клиент его видит (т.е. вместо скрытых ловушек передается просто пол).
5. Клиент имеет право отправить специальный пакет о полной синхронизации мира. Сервер обязан провести эту процедуру.
6. Сервер имеет право проводить процедуру полной синхронизации по своему желанию и обязан проводить по запросу клиента.

FromVersion: 3 //Copy from "version"
Translator: translate.yandex.ru //change if use other
1. The transfer is based on its own rules. //Json is too heavy for this task
    1.1 the Mechanism is based on sending requests in blocks in the format " id, parameters"
        1.1.1 the Request consists of an operation code and parameters
    1.2 the Transfer is carried out by the methods of (de)serialization of objects
    1.3 requests are not separated by anything //there is no need for This. You just pass the data and that's it. The order is always the same. There is no point in separating them.
    1.4 If an incoming request processing error occurs the receiving party sends a request to send a synchronization packet
        1.4.1 Sync packet - a fixed-length packet containing a specific sequence of bytes
        1.4.2 the Synchronization package is used to indicate the latest data
        1.4.3 If the receiving party has problems processing requests, it requests this package and discards all unprocessed requests before this package.
            1.4.3.1: possible causes:
                A) transport level error
                B) an error in generating the request on the sending side and / or an error in reaalizing the sending side
                C) an error in the operation of the request handler and / or an error in its implementation
                D) other reason

2. Single server, multiple clients.
3. The info function for objects and world works on the client side (unless the server requires otherwise, then this is explicitly passed).
    3.1 the server will send a special packet to the client informing that for the Info function, the Latter MUST contact the server to get the final string.

4. The server passes the world to the client as the client sees it (i.e., instead of hidden traps, just the floor is passed).
5. The client has the right to send a special package about full synchronization of the world. The server must perform this procedure.
6. The server has the right to perform the full synchronization procedure at its own request and is obliged to perform it at the request of the client.